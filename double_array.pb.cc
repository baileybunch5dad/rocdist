// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: double_array.proto
// Protobuf C++ Version: 5.29.0

#include "double_array.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace doublearrayservice {

inline constexpr DoubleArrayRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : values_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DoubleArrayRequest::DoubleArrayRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DoubleArrayRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoubleArrayRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoubleArrayRequestDefaultTypeInternal() {}
  union {
    DoubleArrayRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoubleArrayRequestDefaultTypeInternal _DoubleArrayRequest_default_instance_;

inline constexpr CountResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : count_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CountResponse::CountResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CountResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CountResponseDefaultTypeInternal() {}
  union {
    CountResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CountResponseDefaultTypeInternal _CountResponse_default_instance_;
}  // namespace doublearrayservice
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_double_5farray_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_double_5farray_2eproto = nullptr;
const ::uint32_t
    TableStruct_double_5farray_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::doublearrayservice::DoubleArrayRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::doublearrayservice::DoubleArrayRequest, _impl_.values_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::doublearrayservice::CountResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::doublearrayservice::CountResponse, _impl_.count_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::doublearrayservice::DoubleArrayRequest)},
        {9, -1, -1, sizeof(::doublearrayservice::CountResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::doublearrayservice::_DoubleArrayRequest_default_instance_._instance,
    &::doublearrayservice::_CountResponse_default_instance_._instance,
};
const char descriptor_table_protodef_double_5farray_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\022double_array.proto\022\022doublearrayservice"
    "\"$\n\022DoubleArrayRequest\022\016\n\006values\030\001 \003(\001\"\036"
    "\n\rCountResponse\022\r\n\005count\030\001 \001(\0052t\n\022Double"
    "ArrayService\022^\n\017SendDoubleArray\022&.double"
    "arrayservice.DoubleArrayRequest\032!.double"
    "arrayservice.CountResponse\"\000b\006proto3"
};
static ::absl::once_flag descriptor_table_double_5farray_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_double_5farray_2eproto = {
    false,
    false,
    236,
    descriptor_table_protodef_double_5farray_2eproto,
    "double_array.proto",
    &descriptor_table_double_5farray_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_double_5farray_2eproto::offsets,
    file_level_enum_descriptors_double_5farray_2eproto,
    file_level_service_descriptors_double_5farray_2eproto,
};
namespace doublearrayservice {
// ===================================================================

class DoubleArrayRequest::_Internal {
 public:
};

DoubleArrayRequest::DoubleArrayRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:doublearrayservice.DoubleArrayRequest)
}
inline PROTOBUF_NDEBUG_INLINE DoubleArrayRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::doublearrayservice::DoubleArrayRequest& from_msg)
      : values_{visibility, arena, from.values_},
        _cached_size_{0} {}

DoubleArrayRequest::DoubleArrayRequest(
    ::google::protobuf::Arena* arena,
    const DoubleArrayRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DoubleArrayRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:doublearrayservice.DoubleArrayRequest)
}
inline PROTOBUF_NDEBUG_INLINE DoubleArrayRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : values_{visibility, arena},
        _cached_size_{0} {}

inline void DoubleArrayRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DoubleArrayRequest::~DoubleArrayRequest() {
  // @@protoc_insertion_point(destructor:doublearrayservice.DoubleArrayRequest)
  SharedDtor(*this);
}
inline void DoubleArrayRequest::SharedDtor(MessageLite& self) {
  DoubleArrayRequest& this_ = static_cast<DoubleArrayRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* DoubleArrayRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DoubleArrayRequest(arena);
}
constexpr auto DoubleArrayRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DoubleArrayRequest, _impl_.values_) +
          decltype(DoubleArrayRequest::_impl_.values_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(DoubleArrayRequest), alignof(DoubleArrayRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DoubleArrayRequest::PlacementNew_,
                                 sizeof(DoubleArrayRequest),
                                 alignof(DoubleArrayRequest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DoubleArrayRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DoubleArrayRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DoubleArrayRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DoubleArrayRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DoubleArrayRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DoubleArrayRequest>(), &DoubleArrayRequest::ByteSizeLong,
            &DoubleArrayRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DoubleArrayRequest, _impl_._cached_size_),
        false,
    },
    &DoubleArrayRequest::kDescriptorMethods,
    &descriptor_table_double_5farray_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DoubleArrayRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> DoubleArrayRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::doublearrayservice::DoubleArrayRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated double values = 1;
    {::_pbi::TcParser::FastF64P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DoubleArrayRequest, _impl_.values_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated double values = 1;
    {PROTOBUF_FIELD_OFFSET(DoubleArrayRequest, _impl_.values_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void DoubleArrayRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:doublearrayservice.DoubleArrayRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DoubleArrayRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DoubleArrayRequest& this_ = static_cast<const DoubleArrayRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DoubleArrayRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DoubleArrayRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:doublearrayservice.DoubleArrayRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated double values = 1;
          if (this_._internal_values_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_values(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:doublearrayservice.DoubleArrayRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DoubleArrayRequest::ByteSizeLong(const MessageLite& base) {
          const DoubleArrayRequest& this_ = static_cast<const DoubleArrayRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DoubleArrayRequest::ByteSizeLong() const {
          const DoubleArrayRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:doublearrayservice.DoubleArrayRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated double values = 1;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_values_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DoubleArrayRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DoubleArrayRequest*>(&to_msg);
  auto& from = static_cast<const DoubleArrayRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:doublearrayservice.DoubleArrayRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleArrayRequest::CopyFrom(const DoubleArrayRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doublearrayservice.DoubleArrayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DoubleArrayRequest::InternalSwap(DoubleArrayRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::google::protobuf::Metadata DoubleArrayRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CountResponse::_Internal {
 public:
};

CountResponse::CountResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:doublearrayservice.CountResponse)
}
CountResponse::CountResponse(
    ::google::protobuf::Arena* arena, const CountResponse& from)
    : CountResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CountResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CountResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.count_ = {};
}
CountResponse::~CountResponse() {
  // @@protoc_insertion_point(destructor:doublearrayservice.CountResponse)
  SharedDtor(*this);
}
inline void CountResponse::SharedDtor(MessageLite& self) {
  CountResponse& this_ = static_cast<CountResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* CountResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CountResponse(arena);
}
constexpr auto CountResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CountResponse),
                                            alignof(CountResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CountResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CountResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CountResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CountResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CountResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CountResponse>(), &CountResponse::ByteSizeLong,
            &CountResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CountResponse, _impl_._cached_size_),
        false,
    },
    &CountResponse::kDescriptorMethods,
    &descriptor_table_double_5farray_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CountResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> CountResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::doublearrayservice::CountResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 count = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CountResponse, _impl_.count_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CountResponse, _impl_.count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 count = 1;
    {PROTOBUF_FIELD_OFFSET(CountResponse, _impl_.count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:doublearrayservice.CountResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CountResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CountResponse& this_ = static_cast<const CountResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CountResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CountResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:doublearrayservice.CountResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 count = 1;
          if (this_._internal_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:doublearrayservice.CountResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CountResponse::ByteSizeLong(const MessageLite& base) {
          const CountResponse& this_ = static_cast<const CountResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CountResponse::ByteSizeLong() const {
          const CountResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:doublearrayservice.CountResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int32 count = 1;
            if (this_._internal_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CountResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CountResponse*>(&to_msg);
  auto& from = static_cast<const CountResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:doublearrayservice.CountResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _this->_impl_.count_ = from._impl_.count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CountResponse::CopyFrom(const CountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doublearrayservice.CountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CountResponse::InternalSwap(CountResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.count_, other->_impl_.count_);
}

::google::protobuf::Metadata CountResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace doublearrayservice
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_double_5farray_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
